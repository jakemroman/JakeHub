local appkeys = {"GU7GAL-HLW2TGXR4J","P99XV4-6Y359T8584","5KGYY5-YE2JLLG74H"}
function answer(_input)
  _input = textutils.urlEncode(_input)
  http.request("http://api.wolframalpha.com/v2/query?appid="..appkeys[math.random(1,#appkeys)].."&input=".._input.."&format=plaintext")
  parallel.waitForAny(progressBar,
  function()
    repeat sEvent, url, sourceText = os.pullEvent() until sEvent == "http_success" or sEvent == "http_failure"
  end)
  if sEvent == "http_success" then
    local respondedText = sourceText.readAll()
    text = {}
    mainTable = {}
    index = 1
    for content in respondedText:gmatch "<plaintext>(.-)</plaintext>" do
      table.insert(text, content)
      text[index] = string.gsub(text[index],"&apos;","'")
      text[index] = string.gsub(text[index],"&quot;","\"")
      text[index] = string.gsub(text[index],"&amp;","&")
      text[index] = string.gsub(text[index],"&lt;","<")
      text[index] = string.gsub(text[index],"&gt;",">")
      index = index + 1
    end
    cScreen(1,1)
    line(1)  printC("CCiri V "..version, 2) line(3)
    if text[1] ~= nil then
      screenx = term.getSize()
      for i = 1, #text do
        if #text[i] >= screenx-5 then
          k = splitLine(text[i])
          for l = 1, #k do
            table.insert(mainTable, k[l])
          end
        else
          table.insert(mainTable, text[i])
        end
      end
      return true, mainTable
    else
      printC("Output: No answer found", 7)
      waitForExitKey()
      return false, nil
    end
  elseif sEvent == "http_failure" then
    cScreen(1,1)
    line(1)  printC("CCiri V "..version, 2) line(3)
    write("Couldn't contact server")
    waitForExitKey()
    return false, nil
  end
end
